"""
3. Создайте собственный класс-исключение, который должен проверять
содержимое списка на наличие только чисел. Проверить работу исключения на реальном примере.
Необходимо запрашивать у пользователя данные и заполнять список.
Класс-исключение должен контролировать типы данных элементов списка.

Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
При этом скрипт завершается, сформированный список выводится на экран.

Подсказка: для данного задания примем, что пользователь может вводить
только числа и строки. При вводе пользователем очередного элемента
необходимо реализовать проверку типа элемента и вносить его в список,
только если введено число. Класс-исключение должен не позволить пользователю
ввести текст (не число) и отобразить соответствующее сообщение.
При этом работа скрипта не должна завершаться.
"""


class StrException(Exception):

    def __init__(self, txt):
        self.txt = txt

    @classmethod
    def num_validation(cls, string):
        # Будем считать, что под фразой "для данного задания примем, что пользователь
        # может вводить только числа и строки", имеются ввиду натуральные числа.
        # Потому что создавать собственное исключение, проверяя при этом необходимость
        # его создания с помощью другого исключения, это как-то нелепо...
        if string.isdigit():
            return int(string)
        else:
            raise cls("String does not contain a number")


if __name__ == '__main__':

    num_list = []
    while True:
        num = input("Enter number or empty sting to exit:\n>>>")
        if num == "":
            break
        try:
            num_list.append(StrException.num_validation(num))
        except StrException:
            print("Wrong element. Enter number")

    print(num_list)
